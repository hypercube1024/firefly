package com.firefly.kt.web.seed.server.service.external.redis

import com.firefly.kotlin.ext.log.KtLogger
import com.firefly.utils.lang.AbstractLifeCycle
import org.redisson.Redisson
import org.redisson.api.RedissonReactiveClient
import org.redisson.codec.SerializationCodec
import org.redisson.config.Config

/**
 * @author Pengtao Qiu
 */
class RedisService(
    private val address: String,
    private val database: Int,
    private val password: String?
                  ) : AbstractLifeCycle() {

    private val log = KtLogger.getLogger { }

    private lateinit var client: RedissonReactiveClient

    fun getClient(): RedissonReactiveClient {
        return client
    }

    override fun init() {
        try {
            val config = Config()
            config.codec = SerializationCodec()

            val singleServerConfig = config.useSingleServer()
            singleServerConfig.setAddress(address)
            singleServerConfig.database = database
            if (password != null) {
                singleServerConfig.password = password
            }

            log.info("redisson config -> {}", config.toJSON())
            client = Redisson.createReactive(config)
        } catch (e: Exception) {
            log.error("create redisson client exception", e)
        }

    }

    override fun destroy() {
        client.shutdown()
    }
}